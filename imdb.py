# -*- coding: utf-8 -*-
"""IMDb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PCVqQjz5zFjhEGeZnTCkIK3GRaG9rjC7
"""

# Import libraries
import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping

# Set random seed for reproducibility
np.random.seed(42)
tf.random.set_seed(42)

# Load IMDB dataset
num_words = 10000
maxlen = 200
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=num_words)

# Pad sequences to ensure uniform length
x_train = pad_sequences(x_train, maxlen=maxlen)
x_test = pad_sequences(x_test, maxlen=maxlen)

# Build RNN model
model = Sequential()
model.add(Embedding(input_dim=num_words, output_dim=128, input_length=maxlen))
model.add(LSTM(units=128, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(units=1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Print model summary
model.summary()

# Define early stopping callback
early_stopping = EarlyStopping(monitor='val_loss', patience=3)

# Train the model
batch_size = 32
epochs = 10
history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.2, callbacks=[early_stopping])

# Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print(f'Test Loss: {loss}, Test Accuracy: {accuracy}')

# Predict sentiment for a sample review
sample_review = "The movie was fantastic. I loved every moment of it!"
sample_review_seq = imdb.get_word_index()
sample_review_seq = [sample_review_seq[word] if word in sample_review_seq and sample_review_seq[word] < num_words else 0 for word in sample_review.split()]
sample_review_seq = pad_sequences([sample_review_seq], maxlen=maxlen)
prediction = model.predict(sample_review_seq)
print(f'Sentiment Prediction for Sample Review: {prediction[0][0]}')